{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-mat-datetime-picker/lib/core/ngx-mat-date-adapter.ts","ng://ngx-mat-datetime-picker/lib/utils/date-utils.ts","ng://ngx-mat-datetime-picker/lib/ngx-mat-month-view.ts","ng://ngx-mat-datetime-picker/lib/ngx-mat-multi-year-view.ts","ng://ngx-mat-datetime-picker/lib/ngx-mat-year-view.ts","ng://ngx-mat-datetime-picker/lib/core/ngx-mat-native-date-adapter.ts","ng://ngx-mat-datetime-picker/lib/ngx-mat-calendar.ts","ng://ngx-mat-datetime-picker/lib/ngx-mat-timepicker.component.ts","ng://ngx-mat-datetime-picker/lib/ngx-mat-datetime-picker.component.ts","ng://ngx-mat-datetime-picker/lib/ngx-mat-datetime-input.ts","ng://ngx-mat-datetime-picker/lib/ngx-mat-timepicker.module.ts","ng://ngx-mat-datetime-picker/lib/ngx-mat-datetime-picker.module.ts","ng://ngx-mat-datetime-picker/lib/core/ngx-mat-native-date-formats.ts","ng://ngx-mat-datetime-picker/lib/core/ngx-mat-native-date.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","NgxMatDateAdapter","_super","isSameTime","a","getHour","getMinute","getSecond","copyTime","toDate","fromDate","setHour","setMinute","setSecond","compareDateWithTime","first","second","showSeconds","res","compareDate","DateAdapter","LIMIT_TIMES","minHour","maxHour","minMinute","maxMinute","minSecond","maxSecond","meridian","MERIDIANS","NUMERIC_REGEX","PATTERN_INPUT_HOUR","PATTERN_INPUT_MINUTE","PATTERN_INPUT_SECOND","formatTwoDigitTimeValue","val","txt","toString","createMissingDateImplError","provider","Error","NgxMatMonthView","_changeDetectorRef","_dateFormats","_dateAdapter","_dir","selectedChange","EventEmitter","_userSelection","activeDateChange","_activeDate","today","value","oldActiveDate","validDate","_getValidDateOrNull","deserialize","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","_dateSelected","date","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","emit","_handleCalendarBodyKeydown","event","isRtl","_isRtl","keyCode","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","getDate","END","getNumDaysInMonth","PAGE_UP","altKey","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","SPACE","dateFilter","preventDefault","_focusActiveCell","selected","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","markForCheck","_matCalendarBody","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","map","long","narrow","_weekdays","slice","concat","daysInMonth","dateNames","getDateNames","_weeks","cell","push","enabled","_shouldEnableDate","ariaLabel","format","display","dateA11yLabel","cellClasses","dateClass","undefined","MatCalendarCell","d1","d2","obj","isDateInstance","isValid","ChangeDetectorRef","Optional","type","Inject","args","MAT_DATE_FORMATS","Directionality","Input","Output","ViewChild","MatCalendarBody","static","Component","selector","template","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgxMatMultiYearView","yearSelected","isSameMultiYearView","_selectedYear","_this","_todayYear","minYearOfPage","getActiveOffset","_years","row","year","_createCellForYear","_yearSelected","month","Math","min","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","dateAdapter","date1","date2","year1","year2","startingYear","getStartingYear","floor","activeYear","SUPPORTS_INTL_API","NgxMatYearView","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","NgxMatCalendarHeader","_intl","calendar","changeDetectorRef","stateChanges","subscribe","currentView","monthYearLabel","maxYearOfPage","minYearName","maxYearName","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","MatDatepickerIntl","NgxMatCalendar","forwardRef","_moveFocusOnNextTick","startView","Subject","_intlChanges","changes","next","_startAt","_clampedActiveDate","_currentView","_calendarHeaderPortal","ComponentPortal","headerComponent","startAt","ngAfterViewChecked","focusActiveCell","ngOnDestroy","unsubscribe","complete","ngOnChanges","change","firstChange","view","_getCurrentViewComponent","detectChanges","updateTodaysDate","monthView","yearView","multiYearView","sameDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","host","class","NgxMatTimepickerComponent","cd","formBuilder","disabled","showSpinners","hourPlaceholder","minutePlaceholder","secondPlaceholder","stepHour","stepMinute","stepSecond","enableMeridian","color","_onChange","_onTouched","_destroyed","pattern","form","group","hour","Validators","required","minute","Number","controls","isNaN","valid","ngOnInit","valueChanges","pipe","takeUntil","debounceTime","_updateModel","disable","enable","writeValue","_model","_updateHourMinuteSecond","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_disabled","formatInput","input","replace","toggleMeridian","prop","up","_getNextValueByProp","setValue","onlySelf","emitEvent","_hour","_minute","_second","keyProp","toUpperCase","max","FormBuilder","NgxMatTimepickerComponent_1","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","datepickerUid","MatDatepickerContentBase","_elementRef","NgxMatDatetimeContent","elementRef","_timePicker","datepicker","_calendar","ngAfterViewInit","ElementRef","[@transformPanel]","[class.mat-datepicker-content-touch]","animations","matDatepickerAnimations","transformPanel","fadeInCalendar","inputs","mixinColor","NgxMatDatetimePicker","_dialog","_overlay","_ngZone","_viewContainerRef","scrollStrategy","_document","_touchUi","openedStream","closedStream","_opened","_showSpinners","_showSeconds","_stepHour","_stepMinute","_stepSecond","_enableMeridian","_hasBackdrop","id","_validSelected","_focusedElementBeforeOpen","_inputSubscription","Subscription","EMPTY","_disabledChange","_selectedChanged","_minValidator","matDatetimePickerMin","actual","_maxValidator","matDatetimePickerMax","_scrollStrategy","_datepickerInput","_color","_getThemePalette","coerceBooleanProperty","newValue","open","close","minValidators","maxValidators","_dateFilter","_popupRef","dispose","_popupComponentRef","select","_selectYear","_selectMonth","ok","cloned","clone","cancel","_rawValue","_registerInput","_valueChange","activeElement","touchUi","_openAsDialog","_openAsPopup","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","focus","setTimeout","direction","viewContainerRef","panelClass","hasBackdrop","disableClose","width","height","minWidth","minHeight","maxWidth","maxHeight","position","autoFocus","restoreFocus","afterClosed","componentInstance","_setColor","_destroyPopup","_createPopup","attach","instance","onStable","asObservable","take","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","backdropClass","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","filter","ESCAPE","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","MatDialog","Overlay","NgZone","ViewContainerRef","MAT_DATEPICKER_SCROLL_STRATEGY","DOCUMENT","MAT_DATEPICKER_VALUE_ACCESSOR","NgxMatDatetimeInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatetimePickerInputEvent","targetElement","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatetimePickerParse","text","nativeElement","control","controlValue","_datepicker","_filterValidator","matDatetimePickerFilter","_validator","compose","localeChanges","_value","oldDate","_formatValue","_min","_max","element","blur","registerOnValidatorChange","validate","getPopupConnectionElementRef","_onKeydown","isAltDownArrow","readOnly","_onInput","lastValueWasValid","parse","_onBlur","_onFocus","opened","MatFormField","NgxMatDatetimeInput_1","Directive","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(focus)","(keydown)","NgxMatTimepickerModule","NgModule","imports","CommonModule","MatInputModule","ReactiveFormsModule","FormsModule","MatIconModule","MatButtonModule","exports","declarations","NgxMatDatetimePickerModule","MatDatepickerModule","MatDialogModule","PortalModule","entryComponents","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","Intl","_a","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","range","Éµ0","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","valueFunction","valuesArray","NgxMatNativeDateAdapter","matDateLocale","platform","useUtcForDisplay","setLocale","TRIDENT","_clampDate","EDGE","getFullYear","getDay","style","dtf_1","DateTimeFormat","locale","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","getTime","result","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","invalid","NaN","getHours","getMinutes","getSeconds","setHours","setMinutes","setSeconds","str","UTC","getMilliseconds","MAT_DATE_LOCALE","Platform","Injectable","DEFAULT_DATE_INPUT","hour12","NGX_MAT_NATIVE_DATE_FORMATS","NgxNativeDateModule","PlatformModule","useClass","NgxMatNativeDateModule","useValue","Éµ0$1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { DateAdapter } from '@angular/material/core';\r\n\r\nexport abstract class NgxMatDateAdapter<D> extends DateAdapter<D> {\r\n  /**\r\n * Gets the hour component of the given date.\r\n * @param date The date to extract the month from.\r\n * @returns The hour component.\r\n */\r\n  abstract getHour(date: D): number;\r\n\r\n  /**\r\n* Gets the minute component of the given date.\r\n* @param date The date to extract the month from.\r\n* @returns The minute component.\r\n*/\r\n  abstract getMinute(date: D): number;\r\n\r\n  /**\r\n  * Gets the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @returns The second component.\r\n  */\r\n  abstract getSecond(date: D): number;\r\n\r\n  /**\r\n  * Set the hour component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setHour(date: D, value: number): void;\r\n\r\n  /**\r\n  * Set the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setMinute(date: D, value: number): void;\r\n\r\n  /**\r\n   * Set the second component of the given date.\r\n   * @param date The date to extract the month from.\r\n   * @param value The value to set.\r\n   */\r\n  abstract setSecond(date: D, value: number): void;\r\n\r\n  /**\r\n   * Check if two date have same time\r\n   * @param a Date 1\r\n   * @param b Date 2\r\n   */\r\n  isSameTime(a: D, b: D): boolean {\r\n    if (a == null || b == null) return true;\r\n    return this.getHour(a) === this.getHour(b)\r\n      && this.getMinute(a) === this.getMinute(b)\r\n      && this.getSecond(a) === this.getSecond(b);\r\n  }\r\n\r\n  /**\r\n   * Copy time from a date to a another date\r\n   * @param toDate \r\n   * @param fromDate \r\n   */\r\n  copyTime(toDate: D, fromDate: D) {\r\n    this.setHour(toDate, this.getHour(fromDate));\r\n    this.setMinute(toDate, this.getMinute(fromDate));\r\n    this.setSecond(toDate, this.getSecond(fromDate));\r\n  }\r\n\r\n  /**\r\n * Compares two dates.\r\n * @param first The first date to compare.\r\n * @param second The second date to compare.\r\n * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n *     a number greater than 0 if the first date is later.\r\n */\r\n  compareDateWithTime(first: D, second: D, showSeconds?: boolean): number {\r\n    let res = super.compareDate(first, second) ||\r\n      this.getHour(first) - this.getHour(second) ||\r\n      this.getMinute(first) - this.getMinute(second);\r\n    if (showSeconds) {\r\n      res = res || this.getSecond(first) - this.getSecond(second);\r\n    }\r\n    return res;\r\n  }\r\n\r\n}\r\n","export const LIMIT_TIMES = {\r\n    minHour: 0,\r\n    maxHour: 24,\r\n    minMinute: 0,\r\n    maxMinute: 60,\r\n    minSecond: 0,\r\n    maxSecond: 60,\r\n    meridian: 12\r\n}\r\n\r\nexport const MERIDIANS = {\r\n    AM: 'AM',\r\n    PM: 'PM'\r\n}\r\n\r\nexport const DEFAULT_STEP = 1;\r\nexport const DEFAULT_HOUR_PLACEHOLDER = '';\r\nexport const DEFAULT_MINUTE_PLACEHOLDER = '';\r\nexport const DEFAULT_SECOND_PLACEHOLDER = '';\r\nexport const NUMERIC_REGEX = /[^0-9]/g;\r\n\r\nexport const PATTERN_INPUT_HOUR = /^(2[0-3]|[0-1][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_MINUTE = /^([0-5][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_SECOND = /^([0-5][0-9]|[0-9])$/;\r\n\r\nexport function formatTwoDigitTimeValue(val: number) {\r\n    const txt = val.toString();\r\n    return txt.length > 1 ? txt : `0${txt}`;\r\n}\r\n\r\nexport function createMissingDateImplError(provider: string) {\r\n    return Error(\r\n        `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n        `modules at your application root: NgxMatNativeDateModule, NgxMatMomentModule, or provide a ` +\r\n        `custom implementation.`);\r\n}\r\n\r\n/** Formats a range of years. */\r\nexport function formatYearRange(start: string, end: string): string {\r\n    return `${start} \\u2013 ${end}`;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatDateFormats, MAT_DATE_FORMATS } from '@angular/material/core';\r\nimport { MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses } from '@angular/material/datepicker';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\nimport { NgxMatDateAdapter } from './core/ngx-mat-date-adapter';\r\n\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-month-view',\r\n  templateUrl: 'ngx-mat-month-view.html',\r\n  exportAs: 'ngxMatMonthView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatMonthView<D> implements AfterContentInit {\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody, { static: true }) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number | null;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: { long: string, narrow: string }[];\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    if (this._selectedDate != date) {\r\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n          1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n          (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n            this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = event.altKey ?\r\n          this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n          this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = event.altKey ?\r\n          this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n          this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\r\n          this._userSelection.emit();\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel =\r\n      this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n        .toLocaleUpperCase();\r\n\r\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n      this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n      (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n        this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._initWeekdays();\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Initializes the weekdays. */\r\n  private _initWeekdays() {\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return { long, narrow: narrowWeekdays[i] };\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++ , cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\r\n\r\n      this._weeks[this._weeks.length - 1]\r\n        .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return !!date &&\r\n      (!this.dateFilter || this.dateFilter(date)) &&\r\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n      this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n      this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport { MatCalendarBody, MatCalendarCell } from '@angular/material/datepicker';\r\nimport { NgxMatDateAdapter } from './core/ngx-mat-date-adapter';\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-multi-year-view',\r\n  templateUrl: 'ngx-mat-multi-year-view.html',\r\n  exportAs: 'ngxMatMultiYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatMultiYearView<D> implements AfterContentInit {\r\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (!isSameMultiYearView(\r\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new year is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected year. This doesn't imply a change on the selected date */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody, { static: true }) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the currently displayed years. */\r\n  _years: MatCalendarCell[][];\r\n\r\n  /** The year that today falls on. */\r\n  _todayYear: number;\r\n\r\n  /** The year of the selected date. Null if the selected date is null. */\r\n  _selectedYear: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Initializes this multi-year view. */\r\n  _init() {\r\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n\r\n    // We want a range years such that we maximize the number of\r\n    // enabled dates visible at once. This prevents issues where the minimum year\r\n    // is the last item of a page OR the maximum year is the first item of a page.\r\n\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view.\r\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    const minYearOfPage = activeYear - getActiveOffset(\r\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(minYearOfPage + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map(year => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(year: number) {\r\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\r\n    let month = this._dateAdapter.getMonth(this.activeDate);\r\n    let daysInMonth =\r\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n          yearsPerPage - getActiveOffset(\r\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\r\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (year === undefined || year === null ||\r\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n\r\nexport function isSameMultiYearView<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\r\n  const year1 = dateAdapter.getYear(date1);\r\n  const year2 = dateAdapter.getYear(date2);\r\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\r\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\r\n          Math.floor((year2 - startingYear) / yearsPerPage);\r\n}\r\n\r\n/**\r\n * When the multi-year view is first opened, the active year will be in view.\r\n * So we compute how many years are between the active year and the *slot* where our\r\n * \"startingYear\" will render when paged into view.\r\n */\r\nexport function getActiveOffset<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\r\n  const activeYear = dateAdapter.getYear(activeDate);\r\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\r\n    yearsPerPage);\r\n}\r\n\r\n/**\r\n * We pick a \"starting\" year such that either the maximum year would be at the end\r\n * or the minimum year would be at the beginning of a page.\r\n */\r\nfunction getStartingYear<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, minDate: D | null, maxDate: D | null): number {\r\n  let startingYear = 0;\r\n  if (maxDate) {\r\n    const maxYear = dateAdapter.getYear(maxDate);\r\n    startingYear = maxYear - yearsPerPage + 1;\r\n  } else if (minDate) {\r\n    startingYear = dateAdapter.getYear(minDate);\r\n  }\r\n  return startingYear;\r\n}\r\n\r\n/** Gets remainder that is non-negative, even if first number is negative */\r\nfunction euclideanModulo (a: number, b: number): number {\r\n  return (a % b + b) % b;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatDateFormats, MAT_DATE_FORMATS } from '@angular/material/core';\r\nimport { MatCalendarBody, MatCalendarCell } from '@angular/material/datepicker';\r\nimport { NgxMatDateAdapter } from './core/ngx-mat-date-adapter';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-year-view',\r\n  templateUrl: 'ngx-mat-year-view.html',\r\n  exportAs: 'ngxMatYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatYearView<D> implements AfterContentInit {\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected month. This doesn't imply a change on the selected date */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody, { static: true }) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    const normalizedDate =\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\r\n\r\n    this.monthSelected.emit(normalizedDate);\r\n\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\r\n\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate), month,\r\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n          -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n          11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n      month => this._createCellForMonth(month, monthNames[month])));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n      this._dateAdapter.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._dateAdapter.format(\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n      this._dateFormats.display.monthYearA11yLabel);\r\n    return new MatCalendarCell(\r\n      month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (month === undefined || month === null ||\r\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n      this._isYearAndMonthBeforeMinDate(activeYear, month)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { NgxMatDateAdapter } from './ngx-mat-date-adapter';\r\n\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nlet SUPPORTS_INTL_API: boolean;\r\n\r\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\r\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\r\n// the consumer is providing a polyfilled `Map`. See:\r\n// https://github.com/Microsoft/ChakraCore/issues/3189\r\n// https://github.com/angular/components/issues/15687\r\ntry {\r\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\r\n} catch {\r\n  SUPPORTS_INTL_API = false;\r\n}\r\n\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n\r\n\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n\r\n\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n\r\n\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX =\r\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\n@Injectable()\r\nexport class NgxMatNativeDateAdapter extends NgxMatDateAdapter<Date> {\r\n\r\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n  private readonly _clampDate: boolean;\r\n\r\n  /**\r\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n   * will produce `'8/13/1800'`.\r\n   *\r\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n   * getting the string representation of a Date object from its utc representation. We're keeping\r\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n   * though.\r\n   */\r\n  useUtcForDisplay: boolean = true;\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n\r\n    // IE does its own time zone correction, so we disable this on IE.\r\n    this.useUtcForDisplay = !platform.TRIDENT;\r\n    this._clampDate = platform.TRIDENT || platform.EDGE;\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return date.getDate();\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\r\n      return range(12, i =>\r\n        this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return new Date(date.getTime());\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let result = this._createDateWithOverflow(year, month, date);\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n\r\n    if (SUPPORTS_INTL_API) {\r\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n        date = this.clone(date);\r\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n      }\r\n\r\n      displayFormat = { ...displayFormat, timeZone: 'utc' };\r\n\r\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n   * invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Date | null {\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n      // string is the right format first.\r\n      if (ISO_8601_REGEX.test(value)) {\r\n        let date = new Date(value);\r\n        if (this.isValid(date)) {\r\n          return date;\r\n        }\r\n      }\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  getHour(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n  getMinute(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n  getSecond(date: Date): number {\r\n    return date.getSeconds()\r\n  }\r\n\r\n  setHour(date: Date, value: number): void {\r\n    date.setHours(value);\r\n  }\r\n  setMinute(date: Date, value: number): void {\r\n    date.setMinutes(value);\r\n  }\r\n  setSecond(date: Date, value: number): void {\r\n    date.setSeconds(value);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number) {\r\n    const result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * When converting Date object to string, javascript built-in functions may return wrong\r\n   * results because it applies its internal DST rules. The DST rules around the world change\r\n   * very frequently, and the current valid rule is not always valid in previous years though.\r\n   * We work around this problem building a new Date object which has its internal UTC\r\n   * representation with the local date and time.\r\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n   *    timeZone set to 'utc' to work fine.\r\n   * @param date Date from which we want to get the string representation according to dtf\r\n   * @returns A Date object with its UTC representation based on the passed in date info\r\n   */\r\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\r\n    const d = new Date(Date.UTC(\r\n      date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\r\n      date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n    return dtf.format(d);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { ComponentPortal, ComponentType, Portal } from '@angular/cdk/portal';\r\nimport { AfterContentInit, AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatDateFormats, MAT_DATE_FORMATS } from '@angular/material/core';\r\nimport { MatCalendarCellCssClasses, MatDatepickerIntl } from '@angular/material/datepicker';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { NgxMatMonthView } from './ngx-mat-month-view';\r\nimport { getActiveOffset, isSameMultiYearView, NgxMatMultiYearView, yearsPerPage } from './ngx-mat-multi-year-view';\r\nimport { NgxMatYearView } from './ngx-mat-year-view';\r\nimport { createMissingDateImplError, formatYearRange } from './utils/date-utils';\r\nimport { NgxMatDateAdapter } from './core/ngx-mat-date-adapter';\r\n\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\r\n\r\n/** Default header for NgxMatCalendar */\r\n@Component({\r\n  selector: 'ngx-mat-calendar-header',\r\n  templateUrl: 'ngx-mat-calendar-header.html',\r\n  exportAs: 'ngxMatCalendarHeader',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendarHeader<D> {\r\n  constructor(private _intl: MatDatepickerIntl,\r\n    @Inject(forwardRef(() => NgxMatCalendar)) public calendar: NgxMatCalendar<D>,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n    changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  /** The label for the current calendar view. */\r\n  get periodButtonText(): string {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter\r\n        .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\r\n        .toLocaleUpperCase();\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\r\n    }\r\n\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view, and the last year is\r\n    // just yearsPerPage - 1 away.\r\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\r\n    const minYearOfPage = activeYear - getActiveOffset(\r\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\r\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\r\n    const minYearName =\r\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\r\n    const maxYearName =\r\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\r\n    return formatYearRange(minYearName, maxYearName);\r\n  }\r\n\r\n  get periodButtonLabel(): string {\r\n    return this.calendar.currentView == 'month' ?\r\n      this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\r\n\r\n  /** The label for the previous button. */\r\n  get prevButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.prevMonthLabel,\r\n      'year': this._intl.prevYearLabel,\r\n      'multi-year': this._intl.prevMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** The label for the next button. */\r\n  get nextButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.nextMonthLabel,\r\n      'year': this._intl.nextYearLabel,\r\n      'multi-year': this._intl.nextMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  currentPeriodClicked(): void {\r\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  previousClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n      this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\r\n      this._dateAdapter.addCalendarYears(\r\n        this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\r\n      );\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  nextClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n      this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\r\n      this._dateAdapter.addCalendarYears(\r\n        this.calendar.activeDate,\r\n        this.calendar.currentView == 'year' ? 1 : yearsPerPage\r\n      );\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  previousEnabled(): boolean {\r\n    if (!this.calendar.minDate) {\r\n      return true;\r\n    }\r\n    return !this.calendar.minDate ||\r\n      !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  nextEnabled(): boolean {\r\n    return !this.calendar.maxDate ||\r\n      !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n    }\r\n    // Otherwise we are in 'multi-year' view.\r\n    return isSameMultiYearView(\r\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\r\n  }\r\n}\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-calendar',\r\n  templateUrl: 'ngx-mat-calendar.html',\r\n  styleUrls: ['ngx-mat-calendar.scss'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  exportAs: 'ngxMatCalendar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\r\n  /** An input indicating the type of the header component, if set. */\r\n  @Input() headerComponent: ComponentType<any>;\r\n\r\n  /** A portal containing the header component type for this calendar. */\r\n  _calendarHeaderPortal: Portal<any>;\r\n\r\n  private _intlChanges: Subscription;\r\n\r\n  /**\r\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n   * We need to schedule it, rather than do it immediately, because we have to wait\r\n   * for Angular to re-evaluate the view children.\r\n   */\r\n  private _moveFocusOnNextTick = false;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt; }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: MatCalendarView = 'month';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the year chosen in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the month chosen in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(NgxMatMonthView) monthView: NgxMatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(NgxMatYearView) yearView: NgxMatYearView<D>;\r\n\r\n  /** Reference to the current multi-year view component. */\r\n  @ViewChild(NgxMatMultiYearView) multiYearView: NgxMatMultiYearView<D>;\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get activeDate(): D { return this._clampedActiveDate; }\r\n  set activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n    this.stateChanges.next();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  get currentView(): MatCalendarView { return this._currentView; }\r\n  set currentView(value: MatCalendarView) {\r\n    this._currentView = value;\r\n    this._moveFocusOnNextTick = true;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _currentView: MatCalendarView;\r\n\r\n  /**\r\n   * Emits whenever there is a state change that the header may need to respond to.\r\n   */\r\n  stateChanges = new Subject<void>();\r\n\r\n  constructor(_intl: MatDatepickerIntl,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n    private _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxDateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => {\r\n      _changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || NgxMatCalendarHeader);\r\n    this.activeDate = this.startAt || this._dateAdapter.today();\r\n\r\n    // Assign to the private property since we don't want to move focus on init.\r\n    this._currentView = this.startView;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._moveFocusOnNextTick) {\r\n      this._moveFocusOnNextTick = false;\r\n      this.focusActiveCell();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const change =\r\n      changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this._getCurrentViewComponent();\r\n\r\n      if (view) {\r\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\r\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\r\n        this._changeDetectorRef.detectChanges();\r\n        view._init();\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  focusActiveCell() {\r\n    this._getCurrentViewComponent()._focusActiveCell();\r\n  }\r\n\r\n  /** Updates today's date after an update of the active date */\r\n  updateTodaysDate() {\r\n    let view = this.currentView == 'month' ? this.monthView :\r\n      (this.currentView == 'year' ? this.yearView : this.multiYearView);\r\n\r\n    view.ngAfterContentInit();\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D | null): void {\r\n    if (date && !this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\r\n\r\n  /** Handles year selection in the multiyear view. */\r\n  _yearSelectedInMultiYearView(normalizedYear: D) {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelectedInYearView(normalizedMonth: D) {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  _userSelected(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles year/month selection in the multi-year/year views. */\r\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\r\n    this.activeDate = date;\r\n    this.currentView = view;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Returns the component instance that corresponds to the current calendar view. */\r\n  private _getCurrentViewComponent() {\r\n    return this.monthView || this.yearView || this.multiYearView;\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnInit, Optional, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { NgxMatDateAdapter } from './core/ngx-mat-date-adapter';\r\nimport { createMissingDateImplError, DEFAULT_HOUR_PLACEHOLDER, DEFAULT_MINUTE_PLACEHOLDER, DEFAULT_SECOND_PLACEHOLDER, DEFAULT_STEP, formatTwoDigitTimeValue, LIMIT_TIMES, MERIDIANS, NUMERIC_REGEX, PATTERN_INPUT_HOUR, PATTERN_INPUT_MINUTE, PATTERN_INPUT_SECOND } from './utils/date-utils';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-timepicker',\r\n  templateUrl: './ngx-mat-timepicker.component.html',\r\n  styleUrls: ['./ngx-mat-timepicker.component.scss'],\r\n  host: {\r\n    'class': 'ngx-mat-timepicker'\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NgxMatTimepickerComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  exportAs: 'ngxMatTimepicker',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatTimepickerComponent<D> implements ControlValueAccessor, OnInit, OnChanges {\r\n\r\n  public form: FormGroup;\r\n\r\n  @Input() disabled = false;\r\n  @Input() showSpinners = true;\r\n  @Input() hourPlaceholder = DEFAULT_HOUR_PLACEHOLDER;\r\n  @Input() minutePlaceholder = DEFAULT_MINUTE_PLACEHOLDER;\r\n  @Input() secondPlaceholder = DEFAULT_SECOND_PLACEHOLDER;\r\n  @Input() stepHour: number = DEFAULT_STEP;\r\n  @Input() stepMinute: number = DEFAULT_STEP;\r\n  @Input() stepSecond: number = DEFAULT_STEP;\r\n  @Input() showSeconds = false;\r\n  @Input() enableMeridian = false;\r\n  @Input() color: ThemePalette = 'primary';\r\n\r\n  public meridian: string = MERIDIANS.AM;\r\n\r\n  /** Hour */\r\n  private get hour() {\r\n    let val = Number(this.form.controls['hour'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get minute() {\r\n    let val = Number(this.form.controls['minute'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get second() {\r\n    let val = Number(this.form.controls['second'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  /** Whether or not the form is valid */\r\n  public get valid(): boolean {\r\n    return this.form.valid;\r\n  }\r\n\r\n  private _onChange: any = () => { };\r\n  private _onTouched: any = () => { };\r\n  private _disabled: boolean;\r\n  private _model: D;\r\n\r\n  private _destroyed: Subject<void> = new Subject<void>();\r\n\r\n  public pattern = PATTERN_INPUT_HOUR;\r\n\r\n  constructor(@Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    private cd: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    this.form = this.formBuilder.group(\r\n      {\r\n        hour: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_HOUR)]],\r\n        minute: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_MINUTE)]],\r\n        second: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_SECOND)]]\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form.valueChanges.pipe(takeUntil(this._destroyed), debounceTime(400)).subscribe(val => {\r\n      this._updateModel();\r\n    })\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.disabled && !changes.disabled.firstChange) {\r\n      this.disabled ? this.form.disable() : this.form.enable();\r\n    }\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /**\r\n   * Writes a new value to the element.\r\n   * @param obj\r\n   */\r\n  writeValue(val: D): void {\r\n    this._model = val || this._dateAdapter.today();\r\n    this._updateHourMinuteSecond();\r\n  }\r\n\r\n  /** Registers a callback function that is called when the control's value changes in the UI. */\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called when the control receives a touch event.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Enables or disables the appropriate DOM element */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled = isDisabled;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Format input\r\n   * @param input \r\n   */\r\n  public formatInput(input: HTMLInputElement) {\r\n    input.value = input.value.replace(NUMERIC_REGEX, '');\r\n  }\r\n\r\n  /** Toggle meridian */\r\n  public toggleMeridian() {\r\n    this.meridian = (this.meridian === MERIDIANS.AM) ? MERIDIANS.PM : MERIDIANS.AM;\r\n    this.change('hour');\r\n  }\r\n\r\n  /** Change property of time */\r\n  public change(prop: string, up?: boolean) {\r\n    const next = this._getNextValueByProp(prop, up);\r\n    this.form.controls[prop].setValue(formatTwoDigitTimeValue(next), { onlySelf: false, emitEvent: false });\r\n    this._updateModel();\r\n  }\r\n\r\n  /** Update controls of form by model */\r\n  private _updateHourMinuteSecond() {\r\n    let _hour = this._dateAdapter.getHour(this._model);\r\n    const _minute = this._dateAdapter.getMinute(this._model);\r\n    const _second = this._dateAdapter.getSecond(this._model);\r\n\r\n    if (this.enableMeridian) {\r\n      if (_hour > LIMIT_TIMES.meridian) {\r\n        _hour = _hour - LIMIT_TIMES.meridian;\r\n        this.meridian = MERIDIANS.PM;\r\n      } else {\r\n        this.meridian = MERIDIANS.AM;\r\n      }\r\n    }\r\n\r\n    this.form.controls['hour'].setValue(formatTwoDigitTimeValue(_hour));\r\n    this.form.controls['minute'].setValue(formatTwoDigitTimeValue(_minute));\r\n    this.form.controls['second'].setValue(formatTwoDigitTimeValue(_second));\r\n  }\r\n\r\n  /** Update model */\r\n  private _updateModel() {\r\n    let _hour = this.hour;\r\n    if (this.enableMeridian && this.meridian === MERIDIANS.PM && _hour !== LIMIT_TIMES.meridian) {\r\n      _hour = _hour + LIMIT_TIMES.meridian;\r\n    }\r\n\r\n    this._dateAdapter.setHour(this._model, _hour);\r\n    this._dateAdapter.setMinute(this._model, this.minute);\r\n    this._dateAdapter.setSecond(this._model, this.second);\r\n    this._onChange(this._model);\r\n  }\r\n\r\n  /**\r\n   * Get next value by property\r\n   * @param prop \r\n   * @param up\r\n   */\r\n  private _getNextValueByProp(prop: string, up?: boolean): number {\r\n    const keyProp = prop[0].toUpperCase() + prop.slice(1);\r\n    const min = LIMIT_TIMES[`min${keyProp}`];\r\n    let max = LIMIT_TIMES[`max${keyProp}`];\r\n\r\n    if (prop === 'hour' && this.enableMeridian) {\r\n      max = LIMIT_TIMES.meridian;\r\n    }\r\n\r\n    let next;\r\n    if (up == null) {\r\n      next = this[prop] % (max);\r\n    } else {\r\n      next = up ? this[prop] + this[`step${keyProp}`] : this[prop] - this[`step${keyProp}`];\r\n      if (prop === 'hour' && this.enableMeridian) {\r\n        next = next % (max + 1);\r\n        if (next === 0) next = up ? 1 : max;\r\n      } else {\r\n        next = next % max;\r\n      }\r\n      if (up) {\r\n        next = next > max ? (next - max + min) : next;\r\n      } else {\r\n        next = next < min ? (next - min + max) : next;\r\n      }\r\n\r\n    }\r\n\r\n    return next;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { Overlay, OverlayConfig, OverlayRef, PositionStrategy, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, ComponentType } from '@angular/cdk/portal';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ComponentRef, ElementRef, EventEmitter, Inject, Input, NgZone, OnDestroy, Optional, Output, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';\r\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@angular/material/core';\r\nimport { MatCalendarCellCssClasses, matDatepickerAnimations, MAT_DATEPICKER_SCROLL_STRATEGY } from '@angular/material/datepicker';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { NgxMatDateAdapter } from './core/ngx-mat-date-adapter';\r\nimport { merge, Subject, Subscription } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { NgxMatCalendar } from './ngx-mat-calendar';\r\nimport { NgxMatDatetimeInput } from './ngx-mat-datetime-input';\r\nimport { createMissingDateImplError, DEFAULT_STEP } from './utils/date-utils';\r\nimport { NgxMatTimepickerComponent } from './ngx-mat-timepicker.component';\r\nimport { ValidationErrors } from '@angular/forms';\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n// Boilerplate for applying mixins to MatDatepickerContent.\r\n/** @docs-private */\r\nclass MatDatepickerContentBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\r\n  mixinColor(MatDatepickerContentBase);\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * NgxMatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-datetime-content',\r\n  templateUrl: 'ngx-mat-datetime-content.component.html',\r\n  styleUrls: ['ngx-mat-datetime-content.component.scss'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[@transformPanel]': '\"enter\"',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n  },\r\n  animations: [\r\n    matDatepickerAnimations.transformPanel,\r\n    matDatepickerAnimations.fadeInCalendar,\r\n  ],\r\n  exportAs: 'ngxMatDatetimeContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color'],\r\n})\r\nexport class NgxMatDatetimeContent<D> extends _MatDatepickerContentMixinBase\r\n  implements AfterViewInit, CanColor {\r\n\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(NgxMatCalendar, { static: true }) _calendar: NgxMatCalendar<D>;\r\n\r\n  /** Reference to the internal time picker component. */\r\n  @ViewChild(NgxMatTimepickerComponent) _timePicker: NgxMatTimepickerComponent<D>;\r\n\r\n  /** Reference to the datepicker that created the overlay. */\r\n  datepicker: NgxMatDatetimePicker<D>;\r\n\r\n  /** Whether the datepicker is above or below the input. */\r\n  _isAbove: boolean;\r\n\r\n  /** Whether or not the selected date is valid (min,max...) */\r\n  get valid(): boolean {\r\n    return this._timePicker && this._timePicker.valid && this.datepicker.valid;\r\n  }\r\n\r\n  get isCurrentViewMonth(): boolean {\r\n    return this._calendar && (!this._calendar.currentView || this._calendar.currentView == 'month');\r\n  }\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    super(elementRef);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._calendar.focusActiveCell();\r\n  }\r\n\r\n}\r\n\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  selector: 'ngx-mat-datetime-picker',\r\n  template: '',\r\n  exportAs: 'ngxMatDatetimePicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatDatetimePicker<D> implements OnDestroy, CanColor {\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** An input indicating the type of the custom header component for the calendar, if set. */\r\n  @Input() calendarHeaderComponent: ComponentType<any>;\r\n\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\r\n\r\n  /** Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return this._color ||\r\n      (this._datepickerInput ? this._datepickerInput._getThemePalette() : 'primary');\r\n  }\r\n  set color(value: ThemePalette) {\r\n    this._color = value;\r\n  }\r\n  _color: ThemePalette;\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean { return this._touchUi; }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this._datepickerInput ?\r\n      this._datepickerInput.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n  public _disabled: boolean;\r\n\r\n  /**\r\n   * Emits selected year in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits selected month in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : this.close(); }\r\n  private _opened = false;\r\n\r\n  /** Whether the timepicker'spinners is shown. */\r\n  @Input()\r\n  get showSpinners(): boolean { return this._showSpinners; }\r\n  set showSpinners(value: boolean) { this._showSpinners = value; }\r\n  public _showSpinners = true;\r\n\r\n  /** Whether the second part is disabled. */\r\n  @Input()\r\n  get showSeconds(): boolean { return this._showSeconds; }\r\n  set showSeconds(value: boolean) { this._showSeconds = value; }\r\n  public _showSeconds = false;\r\n\r\n  /** Step hour */\r\n  @Input()\r\n  get stepHour(): number { return this._stepHour; }\r\n  set stepHour(value: number) { this._stepHour = value; }\r\n  public _stepHour: number = DEFAULT_STEP;\r\n\r\n  /** Step minute */\r\n  @Input()\r\n  get stepMinute(): number { return this._stepMinute; }\r\n  set stepMinute(value: number) { this._stepMinute = value; }\r\n  public _stepMinute: number = DEFAULT_STEP;\r\n\r\n  /** Step second */\r\n  @Input()\r\n  get stepSecond(): number { return this._stepSecond; }\r\n  set stepSecond(value: number) { this._stepSecond = value; }\r\n  public _stepSecond: number = DEFAULT_STEP;\r\n\r\n  /** Enable meridian */\r\n  @Input()\r\n  get enableMeridian(): boolean { return this._enableMeridian; }\r\n  set enableMeridian(value: boolean) { this._enableMeridian = value; }\r\n  public _enableMeridian: boolean = false;\r\n\r\n  private _hasBackdrop: boolean = true;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id: string = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null { return this._validSelected; }\r\n  set _selected(value: D | null) { this._validSelected = value; }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\r\n\r\n  get valid(): boolean {\r\n    const minValidators = this._minValidator();\r\n    const maxValidators = this._maxValidator();\r\n    return minValidators == null && maxValidators == null;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<NgxMatDatetimeContent<D>> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<NgxMatDatetimeContent<D>>;\r\n\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<NgxMatDatetimeContent<D>> | null;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  _datepickerInput: NgxMatDatetimeInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly _disabledChange = new Subject<boolean>();\r\n\r\n  /** Emits new selected date when selected date changes. */\r\n  readonly _selectedChanged = new Subject<D>();\r\n\r\n  /** Raw value before  */\r\n  private _rawValue: D;\r\n\r\n  constructor(private _dialog: MatDialog,\r\n    private _overlay: Overlay,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator = (): ValidationErrors | null => {\r\n    return (!this._minDate || !this._selected ||\r\n      this._dateAdapter.compareDateWithTime(this._minDate, this._selected, this.showSeconds) <= 0) ?\r\n      null : { 'matDatetimePickerMin': { 'min': this._minDate, 'actual': this._selected } };\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator = (): ValidationErrors | null => {\r\n    return (!this._maxDate || !this._selected ||\r\n      this._dateAdapter.compareDateWithTime(this._maxDate, this._selected, this.showSeconds) >= 0) ?\r\n      null : { 'matDatetimePickerMax': { 'max': this._maxDate, 'actual': this._selected } };\r\n  }\r\n\r\n  /** Selects the given date */\r\n  select(date: D): void {\r\n    this._dateAdapter.copyTime(date, this._selected);\r\n    this._selected = date;\r\n  }\r\n\r\n  /** Emits the selected year in multiyear view */\r\n  _selectYear(normalizedYear: D): void {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Emits selected month in year view */\r\n  _selectMonth(normalizedMonth: D): void {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  /** OK button handler and close*/\r\n  public ok(): void {\r\n    const cloned = this._dateAdapter.clone(this._selected);\r\n    this._selectedChanged.next(cloned);\r\n    this.close();\r\n  }\r\n\r\n  /** Cancel and close */\r\n  public cancel(): void {\r\n    this._selected = this._rawValue;\r\n    this.close();\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: NgxMatDatetimeInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('A MatDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n      this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    this._rawValue = this._selected != null\r\n      ? this._dateAdapter.clone(this._selected) : null;\r\n\r\n    if (this._selected == null) {\r\n      this._selected = this._dateAdapter.today();\r\n    }\r\n\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\r\n    // open at a time, however since we reset the variables in async handlers some overlays\r\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\r\n    // by holding down the enter key).\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n    }\r\n\r\n    this._dialogRef = this._dialog.open<NgxMatDatetimeContent<D>>(NgxMatDatetimeContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog',\r\n\r\n      // These values are all the same as the defaults, but we set them explicitly so that the\r\n      // datepicker dialog behaves consistently even if the user changed the defaults.\r\n      hasBackdrop: true,\r\n      disableClose: false,\r\n      width: '',\r\n      height: '',\r\n      minWidth: '',\r\n      minHeight: '',\r\n      maxWidth: '80vw',\r\n      maxHeight: '',\r\n      position: {},\r\n      autoFocus: true,\r\n      restoreFocus: true\r\n    });\r\n\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n    this._setColor();\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal<NgxMatDatetimeContent<D>>(NgxMatDatetimeContent,\r\n        this._viewContainerRef);\r\n    }\r\n\r\n    this._destroyPopup();\r\n    this._createPopup();\r\n\r\n    this._popupComponentRef = this._popupRef!.attach(this._calendarPortal);\r\n    this._popupComponentRef.instance.datepicker = this;\r\n    this._setColor();\r\n\r\n    // Update the position once the calendar has rendered.\r\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n      this._popupRef!.updatePosition();\r\n    });\r\n\r\n  }\r\n\r\n  /** Destroys the current popup overlay. */\r\n  private _destroyPopup() {\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupRef = this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: this._hasBackdrop,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => {\r\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n        return event.keyCode === ESCAPE ||\r\n          (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\r\n      }))\r\n    ).subscribe(event => {\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      (this._hasBackdrop && event) ? this.cancel() : this.close();\r\n\r\n    });\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn('.mat-datepicker-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withLockedPosition()\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Passes the current theme color along to the calendar overlay. */\r\n  private _setColor(): void {\r\n    const color = this.color;\r\n    if (this._popupComponentRef) {\r\n      this._popupComponentRef.instance.color = color;\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.componentInstance.color = color;\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\r\nimport { Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, Optional, Output } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\r\nimport { MatDateFormats, MAT_DATE_FORMATS, ThemePalette } from '@angular/material/core';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgxMatDatetimePicker } from './ngx-mat-datetime-picker.component';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\nimport { NgxMatDateAdapter } from './core/ngx-mat-date-adapter';\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatetimePickerInputEvent instead.\r\n */\r\nexport class MatDatetimePickerInputEvent<D> {\r\n    /** The new value for the target datepicker input. */\r\n    value: D | null;\r\n\r\n    constructor(\r\n        /** Reference to the datepicker input component that emitted the event. */\r\n        public target: NgxMatDatetimeInput<D>,\r\n        /** Reference to the native input element associated with the datepicker input. */\r\n        public targetElement: HTMLElement) {\r\n        this.value = this.target.value;\r\n    }\r\n}\r\n\r\n\r\n/** Directive used to connect an input to a matDatetimePicker. */\r\n@Directive({\r\n    selector: 'input[ngxMatDatetimePicker]',\r\n    providers: [\r\n        MAT_DATEPICKER_VALUE_ACCESSOR,\r\n        MAT_DATEPICKER_VALIDATORS,\r\n        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatDatetimeInput },\r\n    ],\r\n    host: {\r\n        '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\r\n        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n        '[disabled]': 'disabled',\r\n        '(input)': '_onInput($event.target.value)',\r\n        '(change)': '_onChange()',\r\n        '(blur)': '_onBlur()',\r\n        '(focus)': '_onFocus()',\r\n        '(keydown)': '_onKeydown($event)',\r\n    },\r\n    exportAs: 'ngxMatDatetimePickerInput',\r\n})\r\nexport class NgxMatDatetimeInput<D> implements ControlValueAccessor, OnDestroy, Validator {\r\n    /** The datepicker that this input is associated with. */\r\n    @Input()\r\n    set ngxMatDatetimePicker(value: NgxMatDatetimePicker<D>) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        this._datepicker = value;\r\n        this._datepicker._registerInput(this);\r\n        this._datepickerSubscription.unsubscribe();\r\n\r\n        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        });\r\n    }\r\n    _datepicker: NgxMatDatetimePicker<D>;\r\n\r\n    /** Function that can be used to filter out dates within the datepicker. */\r\n    @Input()\r\n    set ngxMatDatetimePickerFilter(value: (date: D | null) => boolean) {\r\n        this._dateFilter = value;\r\n        this._validatorOnChange();\r\n    }\r\n    _dateFilter: (date: D | null) => boolean;\r\n\r\n    /** The value of the input. */\r\n    @Input()\r\n    get value(): D | null { return this._value; }\r\n    set value(value: D | null) {\r\n        value = this._dateAdapter.deserialize(value);\r\n        this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n        value = this._getValidDateOrNull(value);\r\n        const oldDate = this.value;\r\n        this._value = value;\r\n        this._formatValue(value);\r\n\r\n        if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n            this._valueChange.emit(value);\r\n        }\r\n    }\r\n    private _value: D | null;\r\n\r\n    /** The minimum valid date. */\r\n    @Input()\r\n    get min(): D | null { return this._min; }\r\n    set min(value: D | null) {\r\n        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    private _min: D | null;\r\n\r\n    /** The maximum valid date. */\r\n    @Input()\r\n    get max(): D | null { return this._max; }\r\n    set max(value: D | null) {\r\n        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    private _max: D | null;\r\n\r\n    /** Whether the datepicker-input is disabled. */\r\n    @Input()\r\n    get disabled(): boolean { return !!this._disabled; }\r\n    set disabled(value: boolean) {\r\n        const newValue = value != null && `${value}` !== 'false';\r\n        const element = this._elementRef.nativeElement;\r\n\r\n        if (this._disabled !== newValue) {\r\n            this._disabled = newValue;\r\n            this._disabledChange.emit(newValue);\r\n        }\r\n\r\n        // We need to null check the `blur` method, because it's undefined during SSR.\r\n        if (newValue && element.blur) {\r\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n            // is problematic, because it would mean that it triggers another change detection cycle,\r\n            // which then causes a changed after checked error if the input element was focused before.\r\n            element.blur();\r\n        }\r\n    }\r\n    private _disabled: boolean;\r\n\r\n    /** Emits when a `change` event is fired on this `<input>`. */\r\n    @Output() readonly dateChange: EventEmitter<MatDatetimePickerInputEvent<D>> =\r\n        new EventEmitter<MatDatetimePickerInputEvent<D>>();\r\n\r\n    /** Emits when an `input` event is fired on this `<input>`. */\r\n    @Output() readonly dateInput: EventEmitter<MatDatetimePickerInputEvent<D>> =\r\n        new EventEmitter<MatDatetimePickerInputEvent<D>>();\r\n\r\n    /** Emits when the value changes (either due to user input or programmatic change). */\r\n    _valueChange = new EventEmitter<D | null>();\r\n\r\n    /** Emits when the disabled state has changed */\r\n    _disabledChange = new EventEmitter<boolean>();\r\n\r\n    _onTouched = () => { };\r\n\r\n    private _cvaOnChange: (value: any) => void = () => { };\r\n\r\n    private _validatorOnChange = () => { };\r\n\r\n    private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n    private _localeSubscription = Subscription.EMPTY;\r\n\r\n    /** The form control validator for whether the input parses. */\r\n    private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n        return this._lastValueValid ?\r\n            null : { 'matDatetimePickerParse': { 'text': this._elementRef.nativeElement.value } };\r\n    }\r\n\r\n    /** The form control validator for the min date. */\r\n    private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return (!this.min || !controlValue ||\r\n            this._dateAdapter.compareDateWithTime(this.min, controlValue, this._datepicker.showSeconds) <= 0) ?\r\n            null : { 'matDatetimePickerMin': { 'min': this.min, 'actual': controlValue } };\r\n    }\r\n\r\n    /** The form control validator for the max date. */\r\n    private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return (!this.max || !controlValue ||\r\n            this._dateAdapter.compareDateWithTime(this.max, controlValue,  this._datepicker.showSeconds) >= 0) ?\r\n            null : { 'matDatetimePickerMax': { 'max': this.max, 'actual': controlValue } };\r\n    }\r\n\r\n    /** The form control validator for the date filter. */\r\n    private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n            null : { 'matDatetimePickerFilter': true };\r\n    }\r\n\r\n    /** The combined form control validator for this input. */\r\n    private _validator: ValidatorFn | null =\r\n        Validators.compose(\r\n            [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n    /** Whether the last value set on the input was valid. */\r\n    private _lastValueValid = false;\r\n\r\n    constructor(\r\n        private _elementRef: ElementRef<HTMLInputElement>,\r\n        @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n        @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n        @Optional() private _formField: MatFormField) {\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        if (!this._dateFormats) {\r\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n        }\r\n\r\n        // Update the displayed date when the locale changes.\r\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n            this.value = this.value;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._datepickerSubscription.unsubscribe();\r\n        this._localeSubscription.unsubscribe();\r\n        this._valueChange.complete();\r\n        this._disabledChange.complete();\r\n    }\r\n\r\n    /** @docs-private */\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._validatorOnChange = fn;\r\n    }\r\n\r\n    /** @docs-private */\r\n    validate(c: AbstractControl): ValidationErrors | null {\r\n        return this._validator ? this._validator(c) : null;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n     */\r\n    getPopupConnectionElementRef(): ElementRef {\r\n        return this.getConnectedOverlayOrigin();\r\n    }\r\n\r\n    /**\r\n     * Gets the element that the datepicker popup should be connected to.\r\n     * @return The element to connect the popup to.\r\n     */\r\n    getConnectedOverlayOrigin(): ElementRef {\r\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value: D): void {\r\n        this.value = value;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this._cvaOnChange = fn;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn: () => void): void {\r\n        this._onTouched = fn;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    _onKeydown(event: KeyboardEvent) {\r\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n\r\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n            this._datepicker.open();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    _onInput(value: string) {\r\n        const lastValueWasValid = this._lastValueValid;\r\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n        date = this._getValidDateOrNull(date);\r\n\r\n        const isSameTime = this._dateAdapter.isSameTime(date, this._value);\r\n\r\n        if ((date != null && (!isSameTime || !this._dateAdapter.sameDate(date, this._value)))\r\n            || (date == null && this._value != null)) {\r\n            this._value = date;\r\n            this._cvaOnChange(date);\r\n            this._valueChange.emit(date);\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        } else if (lastValueWasValid !== this._lastValueValid) {\r\n            this._validatorOnChange();\r\n        }\r\n    }\r\n\r\n    _onChange() {\r\n        this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n\r\n    /** Returns the palette used by the input's form field, if any. */\r\n    _getThemePalette(): ThemePalette {\r\n        return this._formField ? this._formField.color : undefined;\r\n    }\r\n\r\n    /** Handles blur events on the input. */\r\n    _onBlur() {\r\n        // Reformat the input only if we have a valid value.\r\n        if (this.value) {\r\n            this._formatValue(this.value);\r\n        }\r\n\r\n        this._onTouched();\r\n    }\r\n\r\n    /** Handles focus events on the input. */\r\n    _onFocus() {\r\n        // Close datetime picker if opened\r\n        if(this._datepicker && this._datepicker.opened){\r\n            this._datepicker.cancel();\r\n        }\r\n    }\r\n\r\n    /** Formats a value and sets it on the input element. */\r\n    private _formatValue(value: D | null) {\r\n        this._elementRef.nativeElement.value =\r\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n    }\r\n\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull(obj: any): D | null {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgxMatTimepickerComponent } from './ngx-mat-timepicker.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatInputModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n  exports: [\r\n    NgxMatTimepickerComponent\r\n  ],\r\n  declarations: [\r\n    NgxMatTimepickerComponent\r\n  ]\r\n})\r\nexport class NgxMatTimepickerModule { }\r\n","import { PortalModule } from '@angular/cdk/portal';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDatepickerModule, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgxMatCalendar, NgxMatCalendarHeader } from './ngx-mat-calendar';\r\nimport { NgxMatDatetimeInput } from './ngx-mat-datetime-input';\r\nimport { NgxMatDatetimeContent, NgxMatDatetimePicker } from './ngx-mat-datetime-picker.component';\r\nimport { NgxMatMonthView } from './ngx-mat-month-view';\r\nimport { NgxMatMultiYearView } from './ngx-mat-multi-year-view';\r\nimport { NgxMatTimepickerModule } from './ngx-mat-timepicker.module';\r\nimport { NgxMatYearView } from './ngx-mat-year-view';\r\n\r\n@NgModule({\r\n   imports: [\r\n      CommonModule,\r\n      MatDatepickerModule,\r\n      MatDialogModule,\r\n      PortalModule,\r\n      FormsModule,\r\n      MatIconModule,\r\n      MatButtonModule,\r\n      MatInputModule,\r\n      NgxMatTimepickerModule\r\n   ],\r\n   exports: [\r\n      NgxMatDatetimePicker,\r\n      NgxMatDatetimeInput,\r\n      NgxMatCalendar,\r\n      NgxMatMonthView,\r\n      NgxMatYearView,\r\n      NgxMatMultiYearView,\r\n      NgxMatCalendarHeader,\r\n      NgxMatDatetimeContent,\r\n   ],\r\n   declarations: [\r\n      NgxMatDatetimePicker,\r\n      NgxMatDatetimeContent,\r\n      NgxMatDatetimeInput,\r\n      NgxMatCalendar,\r\n      NgxMatMonthView,\r\n      NgxMatYearView,\r\n      NgxMatMultiYearView,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   entryComponents: [\r\n      NgxMatDatetimeContent,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   providers: [\r\n      MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\r\n   ]\r\n})\r\nexport class NgxMatDatetimePickerModule { }\r\n","import { MatDateFormats } from '@angular/material/core';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nconst DEFAULT_DATE_INPUT = {\r\n  year: 'numeric', month: 'numeric', day: 'numeric',\r\n  hour12: false, hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"\r\n}\r\n\r\nexport const NGX_MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\r\n  parse: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n  },\r\n  display: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { PlatformModule } from '@angular/cdk/platform';\r\nimport { NgModule } from '@angular/core';\r\nimport { MAT_DATE_FORMATS } from '@angular/material/core';\r\nimport { NgxMatDateAdapter } from './ngx-mat-date-adapter';\r\nimport { NgxMatNativeDateAdapter } from './ngx-mat-native-date-adapter';\r\nimport { NGX_MAT_NATIVE_DATE_FORMATS } from './ngx-mat-native-date-formats';\r\n\r\n\r\n@NgModule({\r\n    imports: [PlatformModule],\r\n    providers: [\r\n        { provide: NgxMatDateAdapter, useClass: NgxMatNativeDateAdapter },\r\n    ],\r\n})\r\nexport class NgxNativeDateModule { }\r\n\r\n@NgModule({\r\n    imports: [NgxNativeDateModule],\r\n    providers: [{ provide: MAT_DATE_FORMATS, useValue: NGX_MAT_NATIVE_DATE_FORMATS }],\r\n})\r\nexport class NgxMatNativeDateModule { }\r\n"]}