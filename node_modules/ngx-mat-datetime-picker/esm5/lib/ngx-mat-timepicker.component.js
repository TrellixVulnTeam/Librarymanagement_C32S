import { __decorate, __metadata, __param } from "tslib";
import { ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnInit, Optional, SimpleChanges, ViewEncapsulation } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { Subject } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { NgxMatDateAdapter } from './core/ngx-mat-date-adapter';
import { createMissingDateImplError, DEFAULT_HOUR_PLACEHOLDER, DEFAULT_MINUTE_PLACEHOLDER, DEFAULT_SECOND_PLACEHOLDER, DEFAULT_STEP, formatTwoDigitTimeValue, LIMIT_TIMES, MERIDIANS, NUMERIC_REGEX, PATTERN_INPUT_HOUR, PATTERN_INPUT_MINUTE, PATTERN_INPUT_SECOND } from './utils/date-utils';
var NgxMatTimepickerComponent = /** @class */ (function () {
    function NgxMatTimepickerComponent(_dateAdapter, cd, formBuilder) {
        this._dateAdapter = _dateAdapter;
        this.cd = cd;
        this.formBuilder = formBuilder;
        this.disabled = false;
        this.showSpinners = true;
        this.hourPlaceholder = DEFAULT_HOUR_PLACEHOLDER;
        this.minutePlaceholder = DEFAULT_MINUTE_PLACEHOLDER;
        this.secondPlaceholder = DEFAULT_SECOND_PLACEHOLDER;
        this.stepHour = DEFAULT_STEP;
        this.stepMinute = DEFAULT_STEP;
        this.stepSecond = DEFAULT_STEP;
        this.showSeconds = false;
        this.enableMeridian = false;
        this.color = 'primary';
        this.meridian = MERIDIANS.AM;
        this._onChange = function () { };
        this._onTouched = function () { };
        this._destroyed = new Subject();
        this.pattern = PATTERN_INPUT_HOUR;
        if (!this._dateAdapter) {
            throw createMissingDateImplError('NgxMatDateAdapter');
        }
        this.form = this.formBuilder.group({
            hour: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_HOUR)]],
            minute: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_MINUTE)]],
            second: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_SECOND)]]
        });
    }
    NgxMatTimepickerComponent_1 = NgxMatTimepickerComponent;
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "hour", {
        /** Hour */
        get: function () {
            var val = Number(this.form.controls['hour'].value);
            return isNaN(val) ? 0 : val;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "minute", {
        get: function () {
            var val = Number(this.form.controls['minute'].value);
            return isNaN(val) ? 0 : val;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "second", {
        get: function () {
            var val = Number(this.form.controls['second'].value);
            return isNaN(val) ? 0 : val;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "valid", {
        /** Whether or not the form is valid */
        get: function () {
            return this.form.valid;
        },
        enumerable: true,
        configurable: true
    });
    NgxMatTimepickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.form.valueChanges.pipe(takeUntil(this._destroyed), debounceTime(400)).subscribe(function (val) {
            _this._updateModel();
        });
    };
    NgxMatTimepickerComponent.prototype.ngOnChanges = function (changes) {
        if (changes.disabled && !changes.disabled.firstChange) {
            this.disabled ? this.form.disable() : this.form.enable();
        }
    };
    NgxMatTimepickerComponent.prototype.ngOnDestroy = function () {
        this._destroyed.next();
        this._destroyed.complete();
    };
    /**
     * Writes a new value to the element.
     * @param obj
     */
    NgxMatTimepickerComponent.prototype.writeValue = function (val) {
        this._model = val || this._dateAdapter.today();
        this._updateHourMinuteSecond();
    };
    /** Registers a callback function that is called when the control's value changes in the UI. */
    NgxMatTimepickerComponent.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    /**
     * Set the function to be called when the control receives a touch event.
     */
    NgxMatTimepickerComponent.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    /** Enables or disables the appropriate DOM element */
    NgxMatTimepickerComponent.prototype.setDisabledState = function (isDisabled) {
        this._disabled = isDisabled;
        this.cd.markForCheck();
    };
    /**
     * Format input
     * @param input
     */
    NgxMatTimepickerComponent.prototype.formatInput = function (input) {
        input.value = input.value.replace(NUMERIC_REGEX, '');
    };
    /** Toggle meridian */
    NgxMatTimepickerComponent.prototype.toggleMeridian = function () {
        this.meridian = (this.meridian === MERIDIANS.AM) ? MERIDIANS.PM : MERIDIANS.AM;
        this.change('hour');
    };
    /** Change property of time */
    NgxMatTimepickerComponent.prototype.change = function (prop, up) {
        var next = this._getNextValueByProp(prop, up);
        this.form.controls[prop].setValue(formatTwoDigitTimeValue(next), { onlySelf: false, emitEvent: false });
        this._updateModel();
    };
    /** Update controls of form by model */
    NgxMatTimepickerComponent.prototype._updateHourMinuteSecond = function () {
        var _hour = this._dateAdapter.getHour(this._model);
        var _minute = this._dateAdapter.getMinute(this._model);
        var _second = this._dateAdapter.getSecond(this._model);
        if (this.enableMeridian) {
            if (_hour > LIMIT_TIMES.meridian) {
                _hour = _hour - LIMIT_TIMES.meridian;
                this.meridian = MERIDIANS.PM;
            }
            else {
                this.meridian = MERIDIANS.AM;
            }
        }
        this.form.controls['hour'].setValue(formatTwoDigitTimeValue(_hour));
        this.form.controls['minute'].setValue(formatTwoDigitTimeValue(_minute));
        this.form.controls['second'].setValue(formatTwoDigitTimeValue(_second));
    };
    /** Update model */
    NgxMatTimepickerComponent.prototype._updateModel = function () {
        var _hour = this.hour;
        if (this.enableMeridian && this.meridian === MERIDIANS.PM && _hour !== LIMIT_TIMES.meridian) {
            _hour = _hour + LIMIT_TIMES.meridian;
        }
        this._dateAdapter.setHour(this._model, _hour);
        this._dateAdapter.setMinute(this._model, this.minute);
        this._dateAdapter.setSecond(this._model, this.second);
        this._onChange(this._model);
    };
    /**
     * Get next value by property
     * @param prop
     * @param up
     */
    NgxMatTimepickerComponent.prototype._getNextValueByProp = function (prop, up) {
        var keyProp = prop[0].toUpperCase() + prop.slice(1);
        var min = LIMIT_TIMES["min" + keyProp];
        var max = LIMIT_TIMES["max" + keyProp];
        if (prop === 'hour' && this.enableMeridian) {
            max = LIMIT_TIMES.meridian;
        }
        var next;
        if (up == null) {
            next = this[prop] % (max);
        }
        else {
            next = up ? this[prop] + this["step" + keyProp] : this[prop] - this["step" + keyProp];
            if (prop === 'hour' && this.enableMeridian) {
                next = next % (max + 1);
                if (next === 0)
                    next = up ? 1 : max;
            }
            else {
                next = next % max;
            }
            if (up) {
                next = next > max ? (next - max + min) : next;
            }
            else {
                next = next < min ? (next - min + max) : next;
            }
        }
        return next;
    };
    var NgxMatTimepickerComponent_1;
    NgxMatTimepickerComponent.ctorParameters = function () { return [
        { type: NgxMatDateAdapter, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: FormBuilder }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxMatTimepickerComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxMatTimepickerComponent.prototype, "showSpinners", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxMatTimepickerComponent.prototype, "hourPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxMatTimepickerComponent.prototype, "minutePlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxMatTimepickerComponent.prototype, "secondPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxMatTimepickerComponent.prototype, "stepHour", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxMatTimepickerComponent.prototype, "stepMinute", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxMatTimepickerComponent.prototype, "stepSecond", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxMatTimepickerComponent.prototype, "showSeconds", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxMatTimepickerComponent.prototype, "enableMeridian", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxMatTimepickerComponent.prototype, "color", void 0);
    NgxMatTimepickerComponent = NgxMatTimepickerComponent_1 = __decorate([
        Component({
            selector: 'ngx-mat-timepicker',
            template: "<form [formGroup]=\"form\">\r\n  <table class=\"table\">\r\n    <tbody class=\"tbody\">\r\n      <tr *ngIf=\"showSpinners\">\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_less icon\" (click)=\"change('hour', true)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_less</mat-icon>\r\n          </button>\r\n        </td>\r\n        <td></td>\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_less icon\" (click)=\"change('minute', true)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_less</mat-icon>\r\n          </button> </td>\r\n        <td></td>\r\n        <td *ngIf=\"showSeconds\">\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_less icon\" (click)=\"change('second', true)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_less</mat-icon>\r\n          </button>\r\n        </td>\r\n        <td *ngIf=\"enableMeridian\" class=\"spacer\"></td>\r\n        <td *ngIf=\"enableMeridian\"></td>\r\n      </tr>\r\n\r\n      <tr>\r\n        <td>\r\n          <mat-form-field>\r\n            <input type=\"text\" matInput (input)=\"formatInput($any($event).target)\" maxlength=\"2\" formControlName=\"hour\"\r\n              [placeholder]=\"hourPlaceholder\" (keydown.ArrowUp)=\"change('hour', true); $event.preventDefault()\"\r\n              (keydown.ArrowDown)=\"change('hour', false); $event.preventDefault()\" (blur)=\"change('hour')\">\r\n          </mat-form-field>\r\n        </td>\r\n        <td class=\"spacer\">&#58;</td>\r\n        <td>\r\n          <mat-form-field>\r\n            <input type=\"text\" matInput (input)=\"formatInput($any($event).target)\" maxlength=\"2\"\r\n              formControlName=\"minute\" (keydown.ArrowUp)=\"change('minute', true); $event.preventDefault()\"\r\n              (keydown.ArrowDown)=\"change('minute', false); $event.preventDefault()\" (blur)=\"change('minute')\">\r\n          </mat-form-field>\r\n        </td>\r\n        <td *ngIf=\"showSeconds\" class=\"spacer\">&#58;</td>\r\n        <td *ngIf=\"showSeconds\">\r\n          <mat-form-field>\r\n            <input type=\"text\" matInput (input)=\"formatInput($any($event).target)\" maxlength=\"2\"\r\n              formControlName=\"second\" (keydown.ArrowUp)=\"change('second', true); $event.preventDefault()\"\r\n              (keydown.ArrowDown)=\"change('second', false); $event.preventDefault()\" (blur)=\"change('second')\">\r\n          </mat-form-field>\r\n        </td>\r\n\r\n        <td *ngIf=\"enableMeridian\" class=\"spacer\"></td>\r\n        <td *ngIf=\"enableMeridian\" class=\"meridian\">\r\n          <button mat-button (click)=\"toggleMeridian()\" mat-stroked-button [color]=\"color\" [disabled]=\"disabled\">\r\n            {{meridian}}\r\n          </button>\r\n        </td>\r\n      </tr>\r\n\r\n      <tr *ngIf=\"showSpinners\">\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_more icon\" (click)=\"change('hour', false)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_more</mat-icon>\r\n          </button> </td>\r\n        <td></td>\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_more icon\" (click)=\"change('minute', false)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_more</mat-icon>\r\n          </button> </td>\r\n        <td *ngIf=\"showSeconds\"></td>\r\n        <td *ngIf=\"showSeconds\">\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_more icon\" (click)=\"change('second', false)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_more</mat-icon>\r\n          </button>\r\n        </td>\r\n        <td *ngIf=\"enableMeridian\" class=\"spacer\"></td>\r\n        <td *ngIf=\"enableMeridian\"></td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</form>",
            host: {
                'class': 'ngx-mat-timepicker'
            },
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return NgxMatTimepickerComponent_1; }),
                    multi: true
                }
            ],
            exportAs: 'ngxMatTimepicker',
            encapsulation: ViewEncapsulation.None,
            styles: [".ngx-mat-timepicker{font-size:13px}.ngx-mat-timepicker form{min-width:90px}.ngx-mat-timepicker form .table .tbody tr td{text-align:center}.ngx-mat-timepicker form .table .tbody tr td.spacer{font-weight:700}.ngx-mat-timepicker form .table .tbody tr td.meridian .mat-button{min-width:64px;line-height:36px;border-radius:50%;min-width:0;width:36px;height:36px;padding:0;flex-shrink:0}.ngx-mat-timepicker form .table .tbody tr td .mat-icon-button{height:24px;width:24px;line-height:24px}.ngx-mat-timepicker form .table .tbody tr td .mat-icon-button .mat-icon{font-size:24px}.ngx-mat-timepicker form .table .tbody tr td .mat-form-field{width:20px;max-width:20px;text-align:center}"]
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [NgxMatDateAdapter,
            ChangeDetectorRef, FormBuilder])
    ], NgxMatTimepickerComponent);
    return NgxMatTimepickerComponent;
}());
export { NgxMatTimepickerComponent };
//# sourceMappingURL=data:application/json;base64,