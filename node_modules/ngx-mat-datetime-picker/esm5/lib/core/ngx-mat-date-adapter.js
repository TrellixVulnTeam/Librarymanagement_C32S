import { __extends } from "tslib";
import { DateAdapter } from '@angular/material/core';
var NgxMatDateAdapter = /** @class */ (function (_super) {
    __extends(NgxMatDateAdapter, _super);
    function NgxMatDateAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Check if two date have same time
     * @param a Date 1
     * @param b Date 2
     */
    NgxMatDateAdapter.prototype.isSameTime = function (a, b) {
        if (a == null || b == null)
            return true;
        return this.getHour(a) === this.getHour(b)
            && this.getMinute(a) === this.getMinute(b)
            && this.getSecond(a) === this.getSecond(b);
    };
    /**
     * Copy time from a date to a another date
     * @param toDate
     * @param fromDate
     */
    NgxMatDateAdapter.prototype.copyTime = function (toDate, fromDate) {
        this.setHour(toDate, this.getHour(fromDate));
        this.setMinute(toDate, this.getMinute(fromDate));
        this.setSecond(toDate, this.getSecond(fromDate));
    };
    /**
   * Compares two dates.
   * @param first The first date to compare.
   * @param second The second date to compare.
   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
   *     a number greater than 0 if the first date is later.
   */
    NgxMatDateAdapter.prototype.compareDateWithTime = function (first, second, showSeconds) {
        var res = _super.prototype.compareDate.call(this, first, second) ||
            this.getHour(first) - this.getHour(second) ||
            this.getMinute(first) - this.getMinute(second);
        if (showSeconds) {
            res = res || this.getSecond(first) - this.getSecond(second);
        }
        return res;
    };
    return NgxMatDateAdapter;
}(DateAdapter));
export { NgxMatDateAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC1kYXRlLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LWRhdGV0aW1lLXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL25neC1tYXQtZGF0ZS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFckQ7SUFBbUQscUNBQWM7SUFBakU7O0lBbUZBLENBQUM7SUF4Q0M7Ozs7T0FJRztJQUNILHNDQUFVLEdBQVYsVUFBVyxDQUFJLEVBQUUsQ0FBSTtRQUNuQixJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7ZUFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztlQUN2QyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxvQ0FBUSxHQUFSLFVBQVMsTUFBUyxFQUFFLFFBQVc7UUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7Ozs7S0FNQztJQUNELCtDQUFtQixHQUFuQixVQUFvQixLQUFRLEVBQUUsTUFBUyxFQUFFLFdBQXFCO1FBQzVELElBQUksR0FBRyxHQUFHLGlCQUFNLFdBQVcsWUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDMUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELElBQUksV0FBVyxFQUFFO1lBQ2YsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDN0Q7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFSCx3QkFBQztBQUFELENBQUMsQUFuRkQsQ0FBbUQsV0FBVyxHQW1GN0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRlQWRhcHRlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5neE1hdERhdGVBZGFwdGVyPEQ+IGV4dGVuZHMgRGF0ZUFkYXB0ZXI8RD4ge1xyXG4gIC8qKlxyXG4gKiBHZXRzIHRoZSBob3VyIGNvbXBvbmVudCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cclxuICogQHBhcmFtIGRhdGUgVGhlIGRhdGUgdG8gZXh0cmFjdCB0aGUgbW9udGggZnJvbS5cclxuICogQHJldHVybnMgVGhlIGhvdXIgY29tcG9uZW50LlxyXG4gKi9cclxuICBhYnN0cmFjdCBnZXRIb3VyKGRhdGU6IEQpOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4qIEdldHMgdGhlIG1pbnV0ZSBjb21wb25lbnQgb2YgdGhlIGdpdmVuIGRhdGUuXHJcbiogQHBhcmFtIGRhdGUgVGhlIGRhdGUgdG8gZXh0cmFjdCB0aGUgbW9udGggZnJvbS5cclxuKiBAcmV0dXJucyBUaGUgbWludXRlIGNvbXBvbmVudC5cclxuKi9cclxuICBhYnN0cmFjdCBnZXRNaW51dGUoZGF0ZTogRCk6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgKiBHZXRzIHRoZSBzZWNvbmQgY29tcG9uZW50IG9mIHRoZSBnaXZlbiBkYXRlLlxyXG4gICogQHBhcmFtIGRhdGUgVGhlIGRhdGUgdG8gZXh0cmFjdCB0aGUgbW9udGggZnJvbS5cclxuICAqIEByZXR1cm5zIFRoZSBzZWNvbmQgY29tcG9uZW50LlxyXG4gICovXHJcbiAgYWJzdHJhY3QgZ2V0U2Vjb25kKGRhdGU6IEQpOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICogU2V0IHRoZSBob3VyIGNvbXBvbmVudCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cclxuICAqIEBwYXJhbSBkYXRlIFRoZSBkYXRlIHRvIGV4dHJhY3QgdGhlIG1vbnRoIGZyb20uXHJcbiAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cclxuICAqL1xyXG4gIGFic3RyYWN0IHNldEhvdXIoZGF0ZTogRCwgdmFsdWU6IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICogU2V0IHRoZSBzZWNvbmQgY29tcG9uZW50IG9mIHRoZSBnaXZlbiBkYXRlLlxyXG4gICogQHBhcmFtIGRhdGUgVGhlIGRhdGUgdG8gZXh0cmFjdCB0aGUgbW9udGggZnJvbS5cclxuICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxyXG4gICovXHJcbiAgYWJzdHJhY3Qgc2V0TWludXRlKGRhdGU6IEQsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHNlY29uZCBjb21wb25lbnQgb2YgdGhlIGdpdmVuIGRhdGUuXHJcbiAgICogQHBhcmFtIGRhdGUgVGhlIGRhdGUgdG8gZXh0cmFjdCB0aGUgbW9udGggZnJvbS5cclxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cclxuICAgKi9cclxuICBhYnN0cmFjdCBzZXRTZWNvbmQoZGF0ZTogRCwgdmFsdWU6IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHR3byBkYXRlIGhhdmUgc2FtZSB0aW1lXHJcbiAgICogQHBhcmFtIGEgRGF0ZSAxXHJcbiAgICogQHBhcmFtIGIgRGF0ZSAyXHJcbiAgICovXHJcbiAgaXNTYW1lVGltZShhOiBELCBiOiBEKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRIb3VyKGEpID09PSB0aGlzLmdldEhvdXIoYilcclxuICAgICAgJiYgdGhpcy5nZXRNaW51dGUoYSkgPT09IHRoaXMuZ2V0TWludXRlKGIpXHJcbiAgICAgICYmIHRoaXMuZ2V0U2Vjb25kKGEpID09PSB0aGlzLmdldFNlY29uZChiKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvcHkgdGltZSBmcm9tIGEgZGF0ZSB0byBhIGFub3RoZXIgZGF0ZVxyXG4gICAqIEBwYXJhbSB0b0RhdGUgXHJcbiAgICogQHBhcmFtIGZyb21EYXRlIFxyXG4gICAqL1xyXG4gIGNvcHlUaW1lKHRvRGF0ZTogRCwgZnJvbURhdGU6IEQpIHtcclxuICAgIHRoaXMuc2V0SG91cih0b0RhdGUsIHRoaXMuZ2V0SG91cihmcm9tRGF0ZSkpO1xyXG4gICAgdGhpcy5zZXRNaW51dGUodG9EYXRlLCB0aGlzLmdldE1pbnV0ZShmcm9tRGF0ZSkpO1xyXG4gICAgdGhpcy5zZXRTZWNvbmQodG9EYXRlLCB0aGlzLmdldFNlY29uZChmcm9tRGF0ZSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIENvbXBhcmVzIHR3byBkYXRlcy5cclxuICogQHBhcmFtIGZpcnN0IFRoZSBmaXJzdCBkYXRlIHRvIGNvbXBhcmUuXHJcbiAqIEBwYXJhbSBzZWNvbmQgVGhlIHNlY29uZCBkYXRlIHRvIGNvbXBhcmUuXHJcbiAqIEByZXR1cm5zIDAgaWYgdGhlIGRhdGVzIGFyZSBlcXVhbCwgYSBudW1iZXIgbGVzcyB0aGFuIDAgaWYgdGhlIGZpcnN0IGRhdGUgaXMgZWFybGllcixcclxuICogICAgIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAwIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGxhdGVyLlxyXG4gKi9cclxuICBjb21wYXJlRGF0ZVdpdGhUaW1lKGZpcnN0OiBELCBzZWNvbmQ6IEQsIHNob3dTZWNvbmRzPzogYm9vbGVhbik6IG51bWJlciB7XHJcbiAgICBsZXQgcmVzID0gc3VwZXIuY29tcGFyZURhdGUoZmlyc3QsIHNlY29uZCkgfHxcclxuICAgICAgdGhpcy5nZXRIb3VyKGZpcnN0KSAtIHRoaXMuZ2V0SG91cihzZWNvbmQpIHx8XHJcbiAgICAgIHRoaXMuZ2V0TWludXRlKGZpcnN0KSAtIHRoaXMuZ2V0TWludXRlKHNlY29uZCk7XHJcbiAgICBpZiAoc2hvd1NlY29uZHMpIHtcclxuICAgICAgcmVzID0gcmVzIHx8IHRoaXMuZ2V0U2Vjb25kKGZpcnN0KSAtIHRoaXMuZ2V0U2Vjb25kKHNlY29uZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbn1cclxuIl19